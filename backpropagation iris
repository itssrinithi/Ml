import numpy as np
import pandas as pd


def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

class NN:
    def __init__(self):
        self.weights = np.random.rand(4, 1)
        self.bias = np.random.rand(1)

    def forward(self, inputs):
        return sigmoid(np.dot(inputs, self.weights) + self.bias)

    def train(self, inputs, targets, epochs):
        for _ in range(epochs):
            outputs = self.forward(inputs)
            error = targets - outputs
            self.weights += 0.1 * inputs.T.dot(error)
            self.bias += 0.1 * np.sum(error)


data = {
    'sepal_length': [5.1, 4.9, 4.7, 4.6],
    'sepal_width': [3.5, 3, 3.2, 3.1],
    'petal_length': [1.4, 1.4, 1.3, 1.5],
    'petal_width': [0.2, 0.2, 0.2, 0.2],
    'species': ['Iris-setosa', 'Iris-setosa', 'Iris-setosa', 'Iris-setosa']
}


df = pd.DataFrame(data)


df['species'] = df['species'].map(lambda x: 1 if x == 'Iris-setosa' else 0)

inputs = df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']].values
targets = df['species'].values.reshape(-1, 1)

nn = NN()
nn.train(inputs, targets, 1000)


print(nn.forward(inputs))
